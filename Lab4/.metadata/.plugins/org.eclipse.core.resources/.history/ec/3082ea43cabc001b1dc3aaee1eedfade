#include <avr/io.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <util/delay.h>
#include <avr/sfr_defs.h>
#include <math.h>
#include <avr/interrupt.h>
#include <avr/eeprom.h>
#include <inttypes.h>
#include "HD44780.h"


#ifndef _BV
#define _BV(bit)				(1<<(bit))
#endif

#ifndef inb
#define	inb(addr)			(addr)
#endif

#ifndef outb
#define	outb(addr, data)	addr = (data)
#endif

#ifndef sbi
#define sbi(reg,bit)		reg |= (_BV(bit))
#endif

#ifndef cbi
#define cbi(reg,bit)		reg &= ~(_BV(bit))
#endif

#ifndef tbi
#define tbi(reg,bit)		reg ^= (_BV(bit))
#endif

//  Gotowe zaimplementowane:
#define 	bit_is_set(sfr, bit)   (_SFR_BYTE(sfr) & _BV(bit))
#define 	bit_is_clear(sfr, bit)   (!(_SFR_BYTE(sfr) & _BV(bit)))
#define 	loop_until_bit_is_set(sfr, bit)   do { } while (bit_is_clear(sfr, bit))
#define 	loop_until_bit_is_clear(sfr, bit)   do { } while (bit_is_set(sfr, bit))



// MIN/MAX/ABS macros
#define MIN(a,b)			((a<b)?(a):(b))
#define MAX(a,b)			((a>b)?(a):(b))
#define ABS(x)				((x>0)?(x):(-x))

//Napiêcie referencyjne 5V

void ADC_init()
{
	//Rejestr Admux
	sbi(ADMUX,REFS0);
	cbi(ADMUX,REFS1);
	//Rejestr ADCSRA Mniejsze od 100kHz
	sbi(ADCSRA,ADPS0);
	sbi(ADCSRA,ADPS1);
	sbi(ADCSRA,ADPS2);
	//Rejestr ADCSRA Aden
	sbi(ADCSRA,ADEN);
	//ADMUX bity Mux - ustawienie kana³u
	cbi(ADMUX,MUX0);
	cbi(ADMUX,MUX1);
	cbi(ADMUX,MUX2);
	cbi(ADMUX,MUX3);
	cbi(ADMUX,MUX4);
}

void ADC_init1()
{
	//Rejestr Admux
	sbi(ADMUX,REFS0);
	cbi(ADMUX,REFS1);
	//Rejestr ADCSRA Mniejsze od 100kHz
	sbi(ADCSRA,ADPS0);
	sbi(ADCSRA,ADPS1);
	sbi(ADCSRA,ADPS2);
	//Rejestr ADCSRA Aden
	sbi(ADCSRA,ADEN);
	//ADMUX bity Mux - ustawienie kana³u
	sbi(ADMUX,MUX0);
	cbi(ADMUX,MUX1);
	cbi(ADMUX,MUX2);
	cbi(ADMUX,MUX3);
	cbi(ADMUX,MUX4);
}

uint16_t ADC_10bit()
{

	sbi(ADCSRA,ADSC);

	while(bit_is_clear(ADCSRA,ADSC));

	return(ADC);
}

uint32_t ADC_measure()
{

	if(ADC_10bit() != 0){

    return 1 + 500*((uint32_t)ADC_10bit())/1024;

	}
	return  500*((uint32_t)ADC_10bit())/1024;

}

//uint32_t ADC_measure1()
//{
//    return 500*((uint32_t)ADC_10bit(PA1))/1024;
//}



/*

// Zadanie na 3
int main() {
	ADC_init();
	LCD_Initalize();
	LCD_Home();
	uint32_t c=0;
	//LCD_Clear();
	char text[20];

	while(1) {
		c = ADC_10bit();
		LCD_Clear();
		LCD_GoTo(0,0);
		sprintf(text , "Pomiar: %"PRIu32" " , c );
		LCD_WriteText(text);
		_delay_ms(1000);
	}

}

*/
/*
//Zadanie na 4

int main() {
	ADC_init();
	LCD_Initalize();
	LCD_Home();
	uint32_t c=0;
	//LCD_Clear();
	char text[20];

	while(1) {
		c = ADC_measure();
		LCD_Clear();
		LCD_GoTo(0,1);
		sprintf(text , "Pomiar: %"PRIu32" V", c );
		LCD_WriteText(text);
		_delay_ms(1000);
	}

}
*/

/*
//Zadanie na 4,5
int main() {
	ADC_init();
	LCD_Initalize();
	LCD_Home();
	uint32_t c=0;
	//LCD_Clear();
	char text[20];

	sbi(DDRC,PC3);        //Stan wysoki na dziodzie
	//sbi(PORTC,PC3);

	while(1) {
		c = ADC_measure();
		LCD_Clear();
		LCD_GoTo(0,0);
		sprintf(text , "Pomiar: %"PRIu32" V" , c );
		LCD_WriteText(text);

		if (c > 250)
		{
			sbi(PORTC,PC3);
			LCD_GoTo(0,1);
			sprintf(text , "on");
			LCD_WriteText(text);
			_delay_ms(1000);
		}
		else
		{
			cbi(PORTC,PC3);
			LCD_GoTo(0,1);
			sprintf(text , "off");
			LCD_WriteText(text);
			_delay_ms(1000);
		}
	}

}
*/

//Zadanie na 5

int main()
{

	LCD_Initalize();
	LCD_Home();
	uint32_t c = 0;
	uint32_t x = 0;
	uint8_t h = 50;
	LCD_Clear();
	char text[20];
	sbi(DDRC,PC3);
	while(1) {

			ADC_init();
			_delay_ms(20);
			c = ADC_measure();

			ADC_init1();
			_delay_ms(20);
			x = ADC_measure();

			_delay_ms(50);

			sprintf(text , "V1:%"PRIu32" V, V2:%"PRIu32" " , c , x );

			LCD_Clear();
			LCD_GoTo(0,0);
			LCD_WriteText(text);
			_delay_ms(300);

		if (x > c + (h/2) )
		{
			sbi(PORTC,PC3);

		}
		else if (x < c - (h/2))
		{
			cbi(PORTC,PC3);

		}



	}
	return 0;
}

